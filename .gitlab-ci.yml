stages:
  - test
  - lint
  - docs
  - deploy

image: robert96/graphwalker-cli:4.0.0

before_script:
  - export LC_ALL=C.UTF-8
  - export LANG=C.UTF-8
  - pip3 install -r requirements.txt --user
  - pip3 install -r requirements-dev.txt

unit tests:
  stage: test
  tags:
    - docker
  artifacts:
    paths:
      - coverage/
  script:
    - pytest tests/unit -s -v --cov=altwalker --cov-report term --cov-report html:coverage/ altwalker/
  after_script:
    - pip3 install coverage-badge
    - coverage-badge -o coverage/coverage.svg

integration test:
  stage: test
  artifacts:
    paths:
      - altwalker.log
      - graphwalker-service.log
    when: always
  tags:
    - docker
  script:
    - pytest -x -s -v -m "not dotnet" tests/integration

dotnet tests:
  stage: test
  image: altwalker/tests:dotnet-v2.2
  artifacts:
    paths:
      - altwalker.log
      - dotnet-executor.log
    when: always
  before_script:
    - pip3 install -r requirements.txt --user
    - pip3 install -r requirements-dev.txt
  script:
    - pytest -x -s -v -m dotnet tests/integration

functional tests:
  stage: test
  image: altwalker/tests:dotnet-v2.2
  artifacts:
    paths:
      - altwalker.log
      - dotnet-executor.log
    when: always
  before_script:
    - apt-get update && apt-get install -y unzip
    - export LC_ALL=C.UTF-8
    - export LANG=C.UTF-8
    - pip3 install -r requirements.txt --user
  script:
    - pip3 install --editable .
    - cd ..
    - wget https://gitlab.com/altom/altwalker/dotnet-executor/-/jobs/artifacts/develop/download?job=dotnet%20pack -O artifacts.zip
    - unzip artifacts.zip
    - altwalker init -l c# --no-git dotnetexample
    - dotnet restore dotnetexample/dotnetexample.Tests/dotnetexample.Tests.csproj -s AltwalkerExecutor/bin/Debug/ -s https://api.nuget.org/v3/index.json
    - altwalker online -x dotnet --url http://localhost:5001/ -m dotnetexample/models/default.json "random(vertex_coverage(100))" dotnetexample/dotnetexample.Tests/

tox:
  image: robert96/graphwalker-cli:tox
  stage: test
  tags:
    - docker
  before_script:
    - tox --version
  script:
    - tox

lint:
  stage: lint
  tags:
    - docker
  script:
    - flake8 altwalker tests

docs:
  stage: docs
  artifacts:
    paths:
      - documentation
  only:
    - master
  script:
    - cd docs
    - make html
    - cp -r _build/html ../documentation

pages:
  stage: deploy
  dependencies:
    - unit tests
    - docs
  tags:
    - docker
  artifacts:
    paths:
    - public
  only:
    - master
  script:
    - cp -r documentation/ public/
    - cp -r coverage/ public/coverage/
